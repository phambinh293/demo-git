Phạm Quảng Bình – 0306211331 – Gõ máy
Hồ Đăng Huy – 0306211352 – Tìm tài liệu
Nguyễn Trần Quốc Đạt – 0306211341- Tìm tài liệu


BÁO CÁO

1.	Lý do sử dụng
Các dự án thực tế thường có nhiều lập trình viên làm việc song song. Vì vậy, một hệ thống kiểm soát phiên bản như Git là cần thiết để đảm bảo không có xung đột code giữa các lập trình viên.
Ngoài ra, các yêu cầu trong các dự án như vậy thay đổi thường xuyên. Vì vậy, một hệ thống kiểm soát phiên bản cho phép các nhà phát triển revert và quay lại phiên bản cũ hơn của code.
Cuối cùng, đôi khi một số dự án đang được chạy song song liên quan đến cùng một cơ sở code. Trong trường hợp như vậy, khái niệm phân nhánh trong Git là rất quan trọng.
•	Dễ sử dụng, thao tác nhanh, gọn, lẹ và rất an toàn.
•	Sễ dàng kết hợp các phân nhánh (branch), có thể giúp quy trình làm việc code theo nhóm đơn giản hơn rất nhiều.
•	Chỉ cần clone mã nguồn từ kho chứa hoặc clone một phiên bản thay đổi nào đó từ kho chứa, hoặc một nhánh nào đó từ kho chứa là bạn có thể làm việc ở mọi lúc mọi nơi.
•	Deployment sản phẩm của bạn một cách không thể nào dễ dàng hơn.

2.	Định nghĩa
Git là một hệ thống quản lý phiên bản phân tán (Distributed Version Control System – DVCS), nó là một trong những hệ thống quản lý phiên bản phân tán phổ biến nhất hiện nay. Git cung cấp cho mỗi lập trình viên kho lưu trữ (repository) riêng chứa toàn bộ lịch sử thay đổi.
3.	Repository 
Repository (nhà kho) hay được gọi tắt là Repo đơn giản là nơi chứa/cơ sở dữ liệu (database) tất cả những thông tin cần thiết để duy trì và quản lý các sửa đổi và lịch sử của dự án.
Local Repository: là repository nằm trên chính máy tính của chúng ta, repository này sẽ đồng bộ hóa với remote repository bằng các lệnh của git.
Remote Repository: là repository được cài đặt trên server chuyên dụng. Ví dụ: GitHub, GitLab, Bitbucket,...

4.	Bắt đầu dùng GIT – Sử Dụng Git cơ bản
1)	GIT là gì?
Trong năm 2005. Linux Torvalds (người tạo ra kernel Linux OS) phát triển GIT và từ đó, nó được vận hành hiệu quả bởi Junio Hamano, một lập trình viên người Nhật. Ngày hôm nay, nó là một hệ thống quản trị mã nguồn mở nổi tiếng nhất và có hàng triệu dự án hoạt động dựa trên nó, để điều khiển phiên bản (bao gồm cả thương mại và dự án mã nguồn mở). GIT hoàn toàn miễn phí, và có thể được tải về cho Mac, Linux, Windows và Solaris từ site chính thức (the official website). Một vài trong số các tính năng phổ biến của GIT là:
Hệ thống quản lý phiên bản phân tán, GIT sử dụng cách tiếp cận peer to peer thay vì những hệ thống quản lý tập trung khác như Subversion (SVN), theo dạng client-server based model.
GIT giúp lập trình viên tạo ra hàng loạt các branches code độc lập. Tạo, xóa, merge những branches này dễ dàng mà không mất thời gian.
Trong GIT, tất cả các hành động đều ở dạng atomic; có nghĩa là một thành động có thể thất bại (không tạo ra thay đổi) hoặc thành công. Việc này rất quan trọng bởi vì trong một số hệ thống quản lý phiên bản (như CVS) thì nó hoạt động dưới dạng non-atomic, nếu một hệ thống quản trị respository bị treo, nó có thể khiến repository ở dạng không ổn định.
Trong GIT, tất cả dữ liệu đều được lưu dưới folder .git. Không giống như một số hệ thống khác là SVN và CVS khi metadata của files được lưu dưới thư mục ẩn (ví dụ:. .cvs, .svn, etc.)
GIT sử dụng data model có thể giúp đảm bảo tính toàn vẹn của dữ liệu chứa trong repository. Mỗi một file được thêm hoặc commit được thực hiện, checksums sẽ được tạo ra, tương tự, chúng được thu thập cũng qua việc checksums..
Một tính năng tuyệt vời khác của GIT là staging area và index. Trong staging area, developers có thể format commits và xem qua nó trước khi thực sự áp dụng.
Rất đơn giản để sử dụng GIT. Để bắt đầu, bạn có thể tạo repository hoặc checkout một cái đã có sẵn. Sauk hi cài đặt, một lệnh đơn giản git-init sẽ giúp bạn cài đặt hết; ngược lại, git clone có thể tạo một bản copy của local repository cho người dùng.

Bước 1 – Cài đặt và sử dụng Git trên hệ thống khác nhau
Tiếp theo, cách dễ nhất để cài GIT trên các hệ điều hành khác nhau sẽ được hướng dẫn:

Lựa chọn 1 – Cài đặt GIT trên Windows:
Cài đặt trên Windows OS dễ nhất, chỉ cần tải và chạy file cài. Các bước cài đặt trên máy windows như sau:
Truy cập trang này (this website) và tải phiên bản GIT for Windows installer.
Khi hoàn tất,double click vào file thực thi cài đặt và bắt đầu quá trình cài đặt. Chỉ cần theo dõi các hướng dẫn trên màn hình, tiếp tục click vào nút Next và cuối cùng nhấn Finish để hoàn tất quá trình cài đặt.
 


Mở command prompt và trong terminal, nhập lệnh sau:
 
Ghi chú: Hãy nhớ thay thế John Smith và example@email.com bằng thông tin của riêng bạn. Tất cả những commits tiếp theo sẽ liên quan đến những thông tin này.
Chỉ có vậy là có thể cài đặt GIT trên Windows.
Lựa chọn 2 – Cài đặt GIT trên MacOS:
Có nhiều cách để cài GIT trên thiết bị Mac, cũng có thể GIT đã có sẵn trên máy tính của bạn nếu bạn có XCODe được cài sẵn. Chạy lệnh sau để kiểm tra:
 
Nếu bạn nhận được output như là git version 2.7.0 (Apple Git-66), vậy là may mắn, nếu không, hãy thực hiện các bước sau::
Truy cập website này this website và tải các phiên bản cài đặt mới nhất dành cho Mac 

Theo dõi các bước trên màn hình và hoàn tất cài đặt.
Một lần nữa hãy dùng lệnh git –version để xác nhận cài đặt đã thành công.
Chạy lệnh sau trên terminal để cấu hình email và username đã liên kết với tài khoản GIT của bạn:
 
Bước 2 – Sử dụng GIT
Tạo/Cài đặt/check out một repository:
Một repository là tài sản lớn nhất của một dự án quản lý phiên bản. Để chuyển bất kỳ thư mục nào thành GIT repository, một command đơn giản là git init <directory> là đủ để dùng. Folder có tên .git bắt đầu xuất hiện chung với thư mục mà bạn đã chạy lệnh trên.
Ngược lại, nếu bạn đã có một thư mục và muốn check out nó (clone nó), hãy dùng lệnh git clone. Nếu bạn muốn check out một repository local, sử dụng GIT command sau:
 
Nếu bạn có ý định check một respository từ xa, sử dụng GIT command:
 
Nếu bạn có tài khoản trên Hostinger, bạn có thể dễ dàng clone và quản lý repositories qua Members Area –> GIT. Ví dụ, nếu bạn muốn clone một GIT repository, chỉ cần điền địa chỉ, chọn branch, và cài đặt đường dẫn sau đó nhấn nút Create
 
Khi quá trình cài đặt hoàn tất, bạn sẽ có thể quản lý repository trong cùng một section
 
Lệnh Git Init
Lệnh git init nhanh chóng tạo ra quản lý phiên bản của dự án dạng none bare mà bạn không cần có ngay một server để lưu Repo từ xa, không yêu cầu bạn phải nạp file dữ liệu nào. Tất cả phải làm là vào thư mục dự án cần khởi tạo và thi hành lệnh sau để khởi tạo:
 
Lệnh Add và Commit:
Thay đổi hoặc thêm file được thêm vào index bằng cách dùng lệnh add. Để thêm bất kỳ file nào, bạn chỉ cần dùng lệnh:
 
Nếu bạn thật sự yên tâm để thực hiện những thay đổi trên HEAD, bạn có thể dùng lệnh  commit. Lệnh sau có thể giúp bạn làm việc này:
 
Ghi chú: Khi lệnh commit được chạy (từ thư mục đang hoạt động), files sẽ được commit tới HEAD, nhưng nó vẫn không được gửi tới repository từ xa.
Đẩy thay đổi xa hơn:
o	Khi bạn đã commit các thay đổi (và tin chắc nó sẳn sàng để gửi tới repository gốc), bạn có thể dùng lệnh push.
o	Khi git push origin master được thực thi từ bên trong thư mục đang hoạt động, thay đổi trong HEAD đã được gửi tới repository từ xa. Trong lệnh đã nói ở trên master có thể được thay đổi thành tên của branch bạn muốn đổi để được committed.

Nếu, tuy nhiên, một repository đang tồn tại chưa được clone và bạn muốn thiết lập kết nối giữa repository của bạn và remote server, làm vậy bằng lệnh sau:
 
Ghi chú: Thay <server> bằng địa chỉ của server từ xa.
Khi được clone, bất kỳ thay đổi nào được đẩy tới server thích hợp.
Lệnh Branches:
Một tính năng tốt khác (nhưng cao cấp) của GIT là khả năng cho phép lập trình viên và quản lý dự án tạo các branches độc lập trong một dự án duy nhất. Mục đích chính của branch là để phát triển các tính năng trong khi cô lập chúng. Branch mặc định của một dự án bất kỳ luôn là master branch. Bạn có thể tạo nhiều branches bao nhiêu cũng được và sau đó merge lại với master branch.
Một branch mới có thể được tạo bằng cách dùng lệnh sau:
 
feature_n là tên của branch
Nếu chuyển về master branch chính là cần thiết, sử dụng git command sau:
 
Bất kỳ branch nào cũng có thể được xóa bởi lệnh sau:
 
Để làm các branch hiện lên cho người dùng khác, bạn sẽ cần phải đẩy nó tới repository từ xa, để làm vậy, sử dụng git command sau:
 
Cập nhật và merge: 
Trong trường hợp bạn muốn cập nhật các thư mục đang hoạt động tới thư mục mới nhất từ repository từ xa, lệnh git pull  cần được dùng.
Để merge một branch khác tới một branch hiện hành, hãy dùng: git merge feature_n.

Bất kỳ khi nào bạn pull hoặc merge, GIT luôn có thể thử tự sửa xung đột, nhưng đôi khi nó không thể. Trong trường hợp lỗi do xung đột, người dùng có thể sửa lỗi thủ công. Khi bạn đã sửa file (để tránh xung đột), đánh dấu merged bằng cách dùng lệnh:
 
Nếu trước merge, bạn muốn xem thay đổi thì dùng lệnh sau:
 
Cách để hạn chế Resolve Conflict
•	Define cấu trúc source code, modulle hoá ngay từ sớm: để tránh conflict thì việc quan trọng nhất vẫn là hạn chế tối đa việc code chung một file, một dòng. Các bạn nên chia nhỏ ứng dụng thành các module nhỏ và chi cho mỗi developer một module nếu có thể.
•	Một số quy ước trước khi tiến hành code: trước khi code chúng ta nên có những quy ước riêng của team trước khi code để tránh conflict code, ví dụ như tách thành những file, sử dụng import/export thay vì viết tất cả các hàm trong một file, các function mới sẽ được define ở dưới cùng....
